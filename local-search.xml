<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CF199B-Special-Olympics-圆环问题</title>
    <link href="/2024/03/08/CF199B-Special-Olympics-%E5%9C%86%E7%8E%AF%E9%97%AE%E9%A2%98/"/>
    <url>/2024/03/08/CF199B-Special-Olympics-%E5%9C%86%E7%8E%AF%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>这个问题是一个几何问题，我们需要找出在两个不同心的环形区域中，最多可以找到多少个完整的圆形轮廓。</p><p>每个环形区域由一个中心点和两个半径定义，中心点的坐标为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，两个半径分别为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>。</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>这个问题的关键在于理解如何判断两个环形区域之间的关系，以及如何从这些环形区域中找出完整的圆形轮廓。</p><p>首先，我们需要计算两个环形区域的中心点之间的距离，这可以通过欧几里得距离公式来实现。</p><p>然后，我们需要判断两个环形区域之间的关系。这可以通过比较两个环形区域的半径和它们的中心点之间的距离来实现。具体来说，我们需要检查以下三种情况：</p><ol><li><p>两个环形区域的中心点之间的距离小于或等于两个环形区域的内半径之差。这意味着一个环形区域完全包含在另一个环形区域内，因此我们可以从这个环形区域中找出一个完整的圆形轮廓。</p></li><li><p>两个环形区域的中心点之间的距离小于或等于一个环形区域的内半径和另一个环形区域的外半径之差。这意味着一个环形区域的内圆和另一个环形区域的外圆相交，因此我们可以从这两个环形区域的交集中找出一个完整的圆形轮廓。</p></li><li><p>两个环形区域的中心点之间的距离大于或等于两个环形区域的外半径之和。这意味着两个环形区域完全分离，因此我们可以从每个环形区域中分别找出一个完整的圆形轮廓。</p></li></ol><p>最后，我们需要对每个环形区域的内半径和外半径，分别与另一个环形区域的内半径和外半径进行上述的判断，将满足条件的情况累加到结果中。</p><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>首先，我们定义了一个结构体 <code>Circle</code> 来存储每个环形区域的信息，包括中心点坐标 $(x, y)$ 和两个半径 $r$ 和 $R$ 。</p><p>然后，我们定义了一个函数 <code>computeDistance</code> 来计算两个点之间的距离，使用的是欧几里得距离公式： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><msqrt><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><msub><mi>x</mi><mn>1</mn></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mn>2</mn></msub><mo>−</mo><msub><mi>y</mi><mn>1</mn></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">d = \sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span></span></span></span>。</p><p>接着，我们定义了一个函数 <code>isCircle</code> 来判断两个环形区域的位置关系。这个函数接受四个参数：两个环心的距离 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>，和两个环的半径  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">r1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">1</span></span></span></span>和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">r2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">2</span></span></span></span>。函数返回一个布尔值，表示两个环是否满足内含、外离或相交的条件。</p><p>最后，在 <code>main</code> 函数中，我们读入两个环的信息，计算它们的环心距离，然后对每个环的两个半径，分别与另一个环的两个半径进行位置关系的判断，将满足条件的情况累加到答案中。</p><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Circle</span><br>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> x, y, innerRadius, outerRadius;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">computeDistance</span><span class="hljs-params">(Circle c1, Circle c2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">sqrt</span>((c1.x - c2.x) * (c1.x - c2.x) + (c1.y - c2.y) * (c1.y - c2.y));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isCircle</span><span class="hljs-params">(<span class="hljs-type">double</span> d, <span class="hljs-type">long</span> <span class="hljs-type">long</span> r, <span class="hljs-type">long</span> <span class="hljs-type">long</span> r1, <span class="hljs-type">long</span> <span class="hljs-type">long</span> r2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (d &lt;= r1 - r) || (d &lt;= r - r2) || (d &gt;= r + r2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Circle c1, c2;<br>    std::cin &gt;&gt; c1.x &gt;&gt; c1.y &gt;&gt; c1.innerRadius &gt;&gt; c1.outerRadius;<br>    std::cin &gt;&gt; c2.x &gt;&gt; c2.y &gt;&gt; c2.innerRadius &gt;&gt; c2.outerRadius;<br>    <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">double</span> d = <span class="hljs-built_in">computeDistance</span>(c1, c2);<br>    result += <span class="hljs-built_in">isCircle</span>(d, c1.innerRadius, c2.innerRadius, c2.outerRadius);<br>    result += <span class="hljs-built_in">isCircle</span>(d, c1.outerRadius, c2.innerRadius, c2.outerRadius);<br>    result += <span class="hljs-built_in">isCircle</span>(d, c2.innerRadius, c1.innerRadius, c1.outerRadius);<br>    result += <span class="hljs-built_in">isCircle</span>(d, c2.outerRadius, c1.innerRadius, c1.outerRadius);<br>    std::cout &lt;&lt; result;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>由于我们只需要对输入的两个环进行一次计算，所以这个程序的时间复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>solutions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCCDET−MaqiOI联办团队日报</title>
    <link href="/2024/03/08/TCCDET%E2%88%92MaqiOI%E8%81%94%E5%8A%9E%E5%9B%A2%E9%98%9F%E6%97%A5%E6%8A%A5/"/>
    <url>/2024/03/08/TCCDET%E2%88%92MaqiOI%E8%81%94%E5%8A%9E%E5%9B%A2%E9%98%9F%E6%97%A5%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>C</mi><mi>C</mi><mi>D</mi><mi>E</mi><mi>T</mi><mo>−</mo><mi>M</mi><mi>a</mi><mi>q</mi><mi>i</mi><mi>O</mi><mi>I</mi><mtext>联办团队日报</mtext></mrow><annotation encoding="application/x-tex">TCCDET-MaqiOI联办团队日报</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord cjk_fallback">联</span><span class="mord cjk_fallback">办</span><span class="mord cjk_fallback">团</span><span class="mord cjk_fallback">队</span><span class="mord cjk_fallback">日</span><span class="mord cjk_fallback">报</span></span></span></span><h3 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h3><p>洛谷图床很难平，方便，快速，但是$10MB$的限额，不定期的高级图床抽风都很令人不适。</p><h3 id="主旨"><a href="#主旨" class="headerlink" title="主旨"></a>主旨</h3><p>所以自建图床迫在眉睫。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="注册一个github账号（有的请忽略此步）"><a href="#注册一个github账号（有的请忽略此步）" class="headerlink" title="注册一个github账号（有的请忽略此步）"></a>注册一个github账号（有的请忽略此步）</h4><p><img src="https://cdn.jsdelivr.net/gh/cudhvgwjhgaeh/luogu-imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-18%20210205.png"></p><h4 id="然后创建一个仓库："><a href="#然后创建一个仓库：" class="headerlink" title="然后创建一个仓库："></a>然后创建一个仓库：</h4><p>名字尽量简单，待会要填。</p><p>最好勾选readme.md。</p><p><img src="https://cdn.jsdelivr.net/gh/cudhvgwjhgaeh/luogu-imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-18%20215800.png"></p><h4 id="配置一个token："><a href="#配置一个token：" class="headerlink" title="配置一个token："></a>配置一个token：</h4><p><img src="https://cdn.jsdelivr.net/gh/cudhvgwjhgaeh/luogu-imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-18%20215836.png"></p><p>选择无期限，勾选repo</p><p>待会会弹出一个页面，请妥善保管你的token，它不会重复显示。</p><h4 id="然后下载PicGo："><a href="#然后下载PicGo：" class="headerlink" title="然后下载PicGo："></a>然后下载PicGo：</h4><p><a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/v2.3.1/PicGo-Setup-2.3.1.exe">点击下载2.3.1版</a></p><p><img src="https://cdn.jsdelivr.net/gh/cudhvgwjhgaeh/luogu-imgs/20231119123436.png"></p><h4 id="配置PicGo："><a href="#配置PicGo：" class="headerlink" title="配置PicGo："></a>配置PicGo：</h4><p>图床配置名：你想填啥就填啥</p><p>设定仓库名：填你的”用户名&#x2F;仓库名”，例子：”username&#x2F;imgs”</p><p>设定token：你申请的token，例如：”XXX_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX”</p><p>设定分支名：main</p><p>设定存储路径：不填留空即可</p><p>设定自己域名：填”<a href="https://cdn.jsdelivr.net/gh/%E4%BD%A0%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D%22%EF%BC%8C%E4%BE%8B%E5%AD%90%EF%BC%9Ahttps://cdn.jsdelivr.net/gh/username/imgs">https://cdn.jsdelivr.net/gh/你的用户名/仓库名&quot;，例子：https://cdn.jsdelivr.net/gh/username/imgs</a><br><img src="https://cdn.jsdelivr.net/gh/cudhvgwjhgaeh/luogu-imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-19%20125334.png"></p><h3 id="结语-公用图床"><a href="#结语-公用图床" class="headerlink" title="结语&amp;公用图床"></a>结语&amp;公用图床</h3><h5 id="公用图床配置，需要PicGo："><a href="#公用图床配置，需要PicGo：" class="headerlink" title="公用图床配置，需要PicGo："></a>公用图床配置，需要PicGo：</h5><p><a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/v2.3.1/PicGo-Setup-2.3.1.exe">点击下载2.3.1版</a></p><p>见上文配置。</p><p>分支名：</p><p><code>main</code></p><p>这是token：</p><p><code>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</code></p><p>这是仓库：</p><p><code>aakjdfajlsd/imgs</code></p><p>这是你的自定义域名：</p><p><code>https://cdn.jsdelivr.net/gh/aakjdfajlsd/imgs</code></p><h2 id="声明："><a href="#声明：" class="headerlink" title="声明："></a>声明：</h2><p><strong>公用图床不保证私密、有效性，请各位酌情使用，不要乱删别人的图片，不要上传一切违法、违规，违反洛谷社区规则的图片，公用图床引起的一切纠纷与开发者、LjkLiu无关，请自行解决。不受理由公用图床所产生的纠纷，若发现违法、违规，违反洛谷社区规则的行为，将举报由洛谷社区管理处置。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>DaliyPosts</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
